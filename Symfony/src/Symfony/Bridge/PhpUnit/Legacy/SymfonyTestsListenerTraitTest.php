<?php

namespace tests\Symfony\Bridge\PhpUnit\Legacy;

use Mockery as m;
use Symfony\Bridge\PhpUnit\Legacy\SymfonyTestsListenerTrait;

class SymfonyTestsListenerTraitTest extends \PHPUnit_Framework_TestCase
{
/**
* @var array
*/
protected $_mockedNamespaces = [];
/**
* @var \Symfony\Bridge\PhpUnit\Legacy\SymfonyTestsListenerTrait
*/
protected $symfonyTestsListenerTrait;

public function setUp()
{
    parent::setUp();

    $this->_mockedNamespaces = [];
    $this->symfonyTestsListenerTrait = new \Symfony\Bridge\PhpUnit\Legacy\SymfonyTestsListenerTrait($this->_mockedNamespaces);
}

public function test__destruct0()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (0 < $this->state) == false (line 79)

    $actual = $this->symfonyTestsListenerTrait->__destruct();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function test__destruct1()
{
    // TODO: Your mock expectations here

    // Traversed conditions
    // if (0 < $this->state) == true (line 79)

    $actual = $this->symfonyTestsListenerTrait->__destruct();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGlobalListenerDisabled0()
{
    // TODO: Your mock expectations here

    $actual = $this->symfonyTestsListenerTrait->globalListenerDisabled();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite0()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite1()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite2()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite3()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite4()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite5()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite6()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite7()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite8()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite9()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite10()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite11()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite12()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite13()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite14()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite15()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite16()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite17()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite18()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite19()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite20()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite21()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite22()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite23()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite24()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite25()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite26()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite27()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite28()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite29()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite30()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite31()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite32()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite33()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite34()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite35()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite36()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite37()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite38()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite39()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite40()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite41()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite42()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite43()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite44()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite45()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite46()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite47()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite48()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite49()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite50()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite51()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite52()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite53()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite54()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite55()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite56()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite57()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite58()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite59()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite60()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite61()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite62()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite63()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite64()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite65()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite66()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite67()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite68()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite69()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite70()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite71()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite72()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite73()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite74()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite75()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite76()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite77()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite78()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite79()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite80()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite81()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite82()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite83()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite84()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite85()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite86()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite87()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite88()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite89()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite90()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite91()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite92()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite93()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite94()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite95()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite96()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite97()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite98()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite99()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite100()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite101()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite102()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite103()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite104()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite105()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite106()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite107()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite108()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite109()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite110()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite111()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite112()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite113()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite114()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite115()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite116()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite117()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite118()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite119()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite120()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite121()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite122()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite123()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite124()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite125()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite126()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite127()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite128()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite129()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite130()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite131()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite132()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite133()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite134()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite135()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite136()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite137()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite138()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite139()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite140()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite141()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite142()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite143()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite144()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite145()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite146()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite147()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite148()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite149()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite150()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite151()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite152()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite153()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite154()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite155()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite156()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite157()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite158()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite159()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite160()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite161()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite162()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite163()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite164()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite165()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite166()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite167()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite168()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite169()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite170()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite171()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite172()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite173()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite174()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite175()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite176()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite177()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite178()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite179()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite180()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite181()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite182()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite183()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite184()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite185()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite186()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite187()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite188()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite189()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite190()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite191()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite192()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite193()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite194()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite195()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite196()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite197()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite198()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite199()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite200()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite201()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite202()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite203()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite204()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite205()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite206()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite207()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite208()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite209()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite210()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite211()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite212()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite213()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite214()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite215()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite216()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite217()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite218()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite219()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite220()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite221()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite222()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite223()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite224()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite225()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite226()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite227()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite228()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite229()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite230()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite231()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite232()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite233()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite234()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite235()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite236()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite237()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite238()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite239()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite240()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite241()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite242()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite243()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite244()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite245()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite246()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite247()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite248()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite249()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite250()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite251()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite252()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite253()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite254()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite255()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite256()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite257()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite258()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite259()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite260()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite261()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite262()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite263()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite264()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite265()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite266()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite267()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite268()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite269()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite270()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite271()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite272()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite273()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite274()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite275()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite276()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite277()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite278()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite279()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite280()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite281()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite282()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite283()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite284()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite285()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite286()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite287()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite288()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite289()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite290()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite291()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite292()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite293()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite294()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite295()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite296()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite297()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite298()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite299()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite300()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite301()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite302()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite303()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite304()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite305()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite306()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite307()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite308()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite309()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite310()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite311()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite312()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite313()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite314()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite315()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite316()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite317()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite318()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite319()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite320()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite321()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite322()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite323()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite324()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite325()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite326()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite327()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite328()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite329()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite330()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite331()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite332()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite333()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite334()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite335()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite336()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite337()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite338()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite339()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite340()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite341()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite342()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite343()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite344()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite345()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite346()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite347()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite348()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite349()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite350()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite351()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite352()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite353()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite354()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite355()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite356()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite357()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite358()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite359()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite360()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite361()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite362()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite363()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite364()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite365()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite366()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite367()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite368()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite369()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite370()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite371()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite372()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite373()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite374()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite375()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite376()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite377()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite378()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite379()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite380()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite381()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite382()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite383()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite384()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite385()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite386()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite387()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite388()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite389()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite390()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite391()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite392()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite393()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite394()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite395()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite396()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite397()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite398()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite399()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite400()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite401()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite402()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite403()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite404()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite405()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite406()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite407()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite408()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite409()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite410()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite411()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite412()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite413()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite414()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite415()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite416()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite417()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite418()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite419()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite420()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite421()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite422()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite423()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite424()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite425()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite426()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite427()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite428()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite429()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite430()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite431()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite432()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite433()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite434()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite435()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite436()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite437()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite438()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite439()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite440()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite441()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite442()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite443()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite444()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite445()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite446()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite447()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite448()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite449()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite450()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite451()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite452()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite453()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite454()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite455()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite456()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite457()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite458()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite459()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite460()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite461()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite462()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite463()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite464()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite465()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite466()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite467()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite468()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite469()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite470()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite471()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite472()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite473()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite474()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite475()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite476()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite477()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite478()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite479()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite480()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite481()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite482()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite483()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite484()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite485()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite486()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite487()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite488()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite489()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite490()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite491()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite492()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite493()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite494()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite495()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite496()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite497()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite498()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite499()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite500()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite501()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite502()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite503()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite504()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite505()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite506()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite507()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite508()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite509()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite510()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite511()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite512()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite513()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite514()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite515()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite516()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite517()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite518()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite519()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite520()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite521()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite522()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite523()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite524()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite525()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite526()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite527()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite528()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite529()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite530()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite531()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite532()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite533()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite534()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite535()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite536()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite537()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite538()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite539()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite540()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite541()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite542()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite543()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite544()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite545()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite546()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite547()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite548()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite549()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite550()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite551()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite552()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite553()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite554()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite555()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite556()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite557()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite558()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite559()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite560()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite561()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite562()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite563()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite564()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite565()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite566()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite567()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite568()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite569()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite570()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite571()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite572()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite573()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite574()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite575()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite576()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite577()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite578()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite579()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite580()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite581()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite582()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite583()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite584()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite585()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite586()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite587()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite588()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite589()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite590()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite591()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite592()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite593()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite594()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite595()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite596()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite597()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite598()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite599()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == false (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite600()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite601()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite602()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite603()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite604()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite605()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite606()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite607()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite608()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite609()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite610()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite611()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite612()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite613()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite614()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite615()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite616()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite617()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite618()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite619()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite620()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite621()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite622()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite623()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite624()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite625()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite626()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite627()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite628()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite629()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite630()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite631()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite632()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite633()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite634()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite635()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite636()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite637()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite638()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite639()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite640()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite641()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite642()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite643()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite644()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite645()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite646()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite647()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite648()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite649()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite650()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite651()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite652()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite653()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite654()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite655()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite656()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite657()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite658()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite659()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite660()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite661()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite662()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite663()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite664()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite665()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite666()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite667()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite668()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite669()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite670()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite671()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite672()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite673()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite674()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite675()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite676()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite677()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite678()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite679()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite680()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite681()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite682()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite683()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite684()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite685()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite686()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite687()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite688()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite689()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite690()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite691()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite692()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite693()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite694()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite695()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite696()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite697()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite698()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite699()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 101)
    // if (null === $Test::getPreserveGlobalStateSettings(get_class($test), $test->getName(false))) == true (line 104)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite700()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == false (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite701()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite702()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == false (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite703()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == false (line 109)
    // if (2 === $this->state) == true (line 151)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) || isset($this->wasSkipped[$suiteName]['*']) || isset($this->wasSkipped[$suiteName][$test->getName()])) == true (line 154)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite704()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite705()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite706()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite707()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite708()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite709()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite710()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite711()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite712()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite713()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite714()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite715()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite716()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite717()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite718()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite719()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite720()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite721()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite722()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite723()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite724()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite725()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite726()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite727()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite728()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite729()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite730()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite731()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite732()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite733()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite734()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite735()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == false (line 113)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite736()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite737()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite738()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite739()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite740()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite741()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite742()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite743()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite744()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite745()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite746()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite747()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite748()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite749()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite750()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite751()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite752()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite753()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite754()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite755()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite756()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite757()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite758()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite759()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite760()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite761()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite762()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite763()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite764()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite765()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite766()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite767()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == false (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite768()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite769()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite770()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite771()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite772()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite773()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite774()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite775()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == false (line 121)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite776()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite777()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite778()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite779()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite780()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite781()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite782()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite783()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == false (line 124)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite784()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite785()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite786()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite787()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite788()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite789()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite790()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite791()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == false (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite792()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite793()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite794()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == false (line 136)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite795()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite796()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == false (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite797()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite798()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == false (line 137)
    // if (in_array('time-sensitive', $groups, true)) == true (line 142)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 145)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTestSuite799()
{
    $suite = m::mock('UntypedParameter_suite_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 92)
    // if (!($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 101)
    // if (-1 === $this->state) == true (line 109)
    // if (!class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', false) && class_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry')) == true (line 113)
    // if (method_exists('Doctrine\\Common\\Annotations\\AnnotationRegistry', 'registerUniqueLoader')) == true (line 114)
    // if ($this->skippedFile = getenv('SYMFONY_PHPUNIT_SKIPPED_TESTS')) == true (line 121)
    // if (file_exists($this->skippedFile)) == true (line 124)
    // if (!($this->wasSkipped = (require $this->skippedFile))) == true (line 127)
    // for (...) == true (line 134)
    // if ($test instanceof \PHPUnit_Framework_TestSuite || $test instanceof \PHPUnit\Framework\TestSuite) == true (line 136)
    // if (!class_exists($test->getName(), false)) == true (line 137)
    // for (...) == false (line 134)

    $actual = $this->symfonyTestsListenerTrait->startTestSuite($suite);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAddSkippedTest0()
{
    $test = m::mock('UntypedParameter_test_');
    $e = m::mock(\Exception::class);
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (0 < $this->state) == false (line 166)

    $actual = $this->symfonyTestsListenerTrait->addSkippedTest($test, $e, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAddSkippedTest1()
{
    $test = m::mock('UntypedParameter_test_');
    $e = m::mock(\Exception::class);
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (0 < $this->state) == true (line 166)
    // if ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) == false (line 167)

    $actual = $this->symfonyTestsListenerTrait->addSkippedTest($test, $e, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAddSkippedTest2()
{
    $test = m::mock('UntypedParameter_test_');
    $e = m::mock(\Exception::class);
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (0 < $this->state) == true (line 166)
    // if ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) == true (line 167)

    $actual = $this->symfonyTestsListenerTrait->addSkippedTest($test, $e, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest0()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 181)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest1()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest2()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest3()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest4()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest5()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest6()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest7()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest8()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest9()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest10()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest11()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest12()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest13()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest14()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest15()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest16()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest17()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest18()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest19()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest20()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest21()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest22()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest23()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest24()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest25()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest26()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest27()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest28()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest29()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest30()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest31()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest32()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest33()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest34()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest35()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest36()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest37()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest38()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest39()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest40()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest41()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest42()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest43()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest44()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest45()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest46()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest47()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest48()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest49()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest50()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest51()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest52()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest53()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest54()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest55()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest56()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest57()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest58()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest59()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest60()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest61()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest62()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest63()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest64()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest65()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest66()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest67()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest68()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest69()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest70()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest71()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest72()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest73()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest74()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest75()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest76()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest77()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest78()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest79()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest80()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest81()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest82()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest83()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest84()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest85()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest86()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest87()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest88()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest89()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest90()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest91()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest92()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest93()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest94()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest95()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest96()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest97()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest98()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest99()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest100()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest101()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest102()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest103()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest104()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest105()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest106()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest107()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest108()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest109()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest110()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest111()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest112()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest113()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest114()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest115()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest116()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest117()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest118()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest119()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest120()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == false (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest121()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest122()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest123()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest124()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest125()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest126()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest127()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest128()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest129()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest130()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest131()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest132()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest133()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest134()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest135()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest136()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest137()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest138()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest139()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest140()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest141()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest142()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest143()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest144()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest145()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest146()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest147()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest148()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest149()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest150()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest151()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest152()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest153()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest154()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest155()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest156()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest157()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest158()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest159()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest160()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest161()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest162()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest163()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest164()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest165()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest166()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest167()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest168()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest169()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest170()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest171()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest172()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest173()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest174()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest175()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest176()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest177()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest178()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest179()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest180()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == false (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest181()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest182()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest183()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest184()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest185()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest186()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest187()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest188()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest189()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest190()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest191()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest192()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest193()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest194()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest195()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest196()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest197()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest198()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest199()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest200()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest201()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest202()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest203()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest204()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest205()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest206()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest207()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest208()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest209()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest210()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest211()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest212()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest213()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest214()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest215()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest216()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == false (line 201)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest217()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest218()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest219()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest220()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest221()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest222()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest223()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest224()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest225()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest226()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest227()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest228()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == false (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest229()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest230()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest231()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest232()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest233()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest234()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest235()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest236()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest237()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == false (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest238()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == false (line 216)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest239()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == false (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testStartTest240()
{
    $test = m::mock('UntypedParameter_test_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (-2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 181)
    // if (null !== $test->getTestResultObject()) == true (line 182)
    // if ($this->willBeIsolated($test)) == true (line 187)
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 192)
    // if (!$this->runsInSeparateProcess) == true (line 201)
    // if (in_array('time-sensitive', $groups, true)) == true (line 202)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 206)
    // if (isset($annotations['class']['expectedDeprecation'])) == true (line 213)
    // if (isset($annotations['method']['expectedDeprecation'])) == true (line 216)
    // if (!in_array('legacy', $groups, true)) == true (line 217)

    $actual = $this->symfonyTestsListenerTrait->startTest($test);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAddWarning0()
{
    $test = m::mock('UntypedParameter_test_');
    $e = m::mock('UntypedParameter_e_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) == false (line 231)

    $actual = $this->symfonyTestsListenerTrait->addWarning($test, $e, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testAddWarning1()
{
    $test = m::mock('UntypedParameter_test_');
    $e = m::mock('UntypedParameter_e_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase) == true (line 231)

    $actual = $this->symfonyTestsListenerTrait->addWarning($test, $e, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest0()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest2()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest3()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest4()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest5()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest6()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest7()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest8()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest9()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest10()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest11()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest12()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest13()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest14()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest15()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest16()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest17()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest18()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest19()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest20()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest21()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest22()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest23()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest24()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest25()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest26()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest27()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest28()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest29()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest30()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest31()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest32()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest33()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest34()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest35()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest36()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest37()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest38()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest39()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest40()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest41()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest42()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest43()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest44()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest45()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest46()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest47()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest48()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest49()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest50()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest51()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest52()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest53()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest54()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest55()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest56()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest57()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest58()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest59()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest60()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest61()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest62()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest63()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest64()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest65()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest66()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest67()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest68()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest69()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest70()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest71()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest72()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest73()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest74()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest75()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest76()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest77()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest78()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest79()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest80()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest81()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest82()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest83()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest84()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest85()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest86()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest87()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest88()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest89()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest90()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest91()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest92()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest93()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest94()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest95()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest96()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest97()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest98()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest99()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest100()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest101()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest102()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest103()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest104()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest105()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest106()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest107()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest108()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest109()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest110()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest111()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest112()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest113()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest114()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest115()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest116()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest117()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest118()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest119()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest120()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest121()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest122()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest123()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest124()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest125()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest126()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest127()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest128()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest129()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest130()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest131()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest132()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest133()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest134()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest135()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest136()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest137()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest138()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest139()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest140()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest141()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest142()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest143()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest144()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest145()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest146()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest147()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest148()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest149()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest150()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest151()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest152()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest153()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest154()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest155()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest156()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest157()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest158()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest159()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest160()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest161()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest162()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest163()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest164()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest165()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest166()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest167()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest168()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest169()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest170()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest171()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest172()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest173()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest174()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest175()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest176()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest177()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest178()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest179()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest180()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest181()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest182()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest183()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest184()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest185()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest186()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest187()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest188()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest189()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest190()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest191()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest192()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest193()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest194()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest195()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest196()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest197()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest198()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest199()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest200()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest201()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest202()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest203()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest204()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest205()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest206()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest207()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest208()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest209()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest210()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest211()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest212()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest213()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest214()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest215()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest216()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest217()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest218()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest219()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest220()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest221()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest222()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest223()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest224()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest225()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest226()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest227()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest228()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest229()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest230()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest231()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest232()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest233()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest234()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest235()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest236()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest237()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest238()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest239()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest240()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest241()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest242()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest243()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest244()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest245()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest246()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest247()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest248()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest249()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest250()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest251()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest252()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest253()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest254()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest255()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest256()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest257()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest258()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest259()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest260()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest261()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest262()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest263()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest264()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest265()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest266()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest267()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest268()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest269()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest270()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest271()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest272()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest273()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest274()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest275()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest276()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest277()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest278()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest279()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest280()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest281()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest282()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest283()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest284()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest285()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest286()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest287()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest288()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest289()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest290()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest291()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest292()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest293()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest294()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest295()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest296()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest297()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest298()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest299()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest300()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest301()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest302()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest303()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest304()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest305()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest306()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest307()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest308()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest309()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest310()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest311()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest312()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest313()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest314()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest315()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest316()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest317()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest318()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest319()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest320()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest321()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest322()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest323()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest324()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest325()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest326()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest327()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest328()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest329()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest330()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest331()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest332()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest333()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest334()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest335()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest336()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest337()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest338()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest339()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest340()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest341()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest342()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest343()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest344()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest345()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest346()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest347()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest348()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest349()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest350()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest351()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest352()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest353()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest354()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest355()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest356()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest357()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest358()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest359()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest360()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest361()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest362()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest363()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest364()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest365()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest366()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest367()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest368()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest369()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest370()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest371()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest372()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest373()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest374()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest375()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest376()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest377()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest378()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest379()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest380()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest381()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest382()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest383()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest384()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest385()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest386()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest387()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest388()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest389()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest390()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest391()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest392()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest393()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest394()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest395()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest396()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest397()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest398()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest399()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest400()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest401()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest402()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest403()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest404()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest405()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest406()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest407()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest408()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest409()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest410()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest411()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest412()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest413()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest414()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest415()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest416()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest417()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest418()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest419()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest420()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest421()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest422()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest423()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest424()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest425()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest426()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest427()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest428()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest429()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest430()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest431()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest432()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest433()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest434()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest435()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest436()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest437()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest438()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest439()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest440()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest441()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest442()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest443()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest444()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest445()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest446()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest447()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest448()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest449()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest450()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest451()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest452()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest453()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest454()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest455()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest456()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest457()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest458()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest459()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest460()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest461()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest462()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest463()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest464()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest465()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest466()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest467()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest468()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest469()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest470()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest471()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest472()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest473()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest474()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest475()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest476()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest477()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest478()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest479()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest480()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest481()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest482()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest483()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest484()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest485()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest486()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest487()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest488()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest489()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest490()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest491()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest492()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest493()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest494()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest495()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest496()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest497()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest498()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest499()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest500()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest501()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest502()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest503()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest504()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest505()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest506()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest507()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest508()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest509()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest510()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest511()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest512()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest513()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest514()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest515()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest516()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest517()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest518()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest519()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest520()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest521()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest522()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest523()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest524()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest525()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest526()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest527()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest528()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest529()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest530()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest531()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest532()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest533()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest534()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest535()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest536()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest537()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest538()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest539()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest540()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest541()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest542()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest543()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest544()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest545()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest546()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest547()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest548()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest549()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest550()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest551()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest552()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest553()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest554()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest555()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest556()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest557()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest558()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest559()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest560()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest561()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest562()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest563()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest564()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest565()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest566()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest567()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest568()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest569()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest570()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest571()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest572()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest573()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest574()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest575()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest576()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest577()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest578()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest579()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest580()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest581()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest582()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest583()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest584()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest585()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest586()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest587()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest588()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest589()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest590()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest591()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest592()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest593()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest594()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest595()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest596()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest597()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest598()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest599()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest600()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest601()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest602()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest603()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest604()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest605()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest606()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest607()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest608()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest609()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest610()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest611()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest612()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest613()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest614()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest615()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest616()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest617()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest618()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest619()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest620()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest621()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest622()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest623()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest624()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest625()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest626()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest627()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest628()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest629()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest630()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest631()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest632()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest633()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest634()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest635()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest636()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest637()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest638()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest639()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest640()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest641()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest642()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest643()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest644()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest645()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest646()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest647()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest648()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest649()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest650()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest651()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest652()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest653()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest654()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest655()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest656()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest657()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest658()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest659()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest660()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest661()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest662()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest663()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest664()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest665()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest666()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest667()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest668()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest669()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest670()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest671()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest672()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest673()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest674()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest675()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest676()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest677()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest678()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest679()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest680()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest681()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest682()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest683()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest684()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest685()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest686()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest687()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest688()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest689()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest690()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest691()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest692()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest693()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest694()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest695()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest696()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest697()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest698()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest699()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest700()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest701()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest702()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest703()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest704()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest705()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest706()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest707()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest708()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest709()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest710()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest711()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest712()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest713()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest714()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest715()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest716()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest717()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest718()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest719()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest720()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest721()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest722()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest723()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest724()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest725()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest726()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest727()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest728()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest729()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest730()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest731()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest732()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest733()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest734()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest735()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest736()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest737()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest738()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest739()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest740()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest741()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest742()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest743()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest744()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest745()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest746()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest747()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest748()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest749()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest750()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest751()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == false (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest752()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest753()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest754()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest755()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest756()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest757()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest758()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest759()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest760()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest761()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest762()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest763()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest764()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest765()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest766()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest767()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest768()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest769()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest770()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest771()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest772()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest773()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest774()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest775()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest776()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest777()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest778()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest779()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest780()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest781()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest782()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest783()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest784()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest785()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest786()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest787()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest788()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest789()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest790()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest791()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest792()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest793()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest794()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest795()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest796()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest797()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest798()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest799()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest800()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest801()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest802()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest803()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest804()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest805()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest806()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest807()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest808()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest809()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest810()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest811()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest812()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest813()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest814()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest815()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest816()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest817()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest818()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest819()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest820()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest821()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest822()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest823()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest824()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest825()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest826()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest827()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest828()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest829()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest830()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest831()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest832()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest833()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest834()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest835()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest836()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest837()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest838()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest839()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest840()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest841()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest842()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest843()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest844()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest845()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest846()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest847()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest848()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest849()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest850()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest851()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest852()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest853()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest854()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest855()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest856()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest857()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest858()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest859()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest860()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest861()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest862()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest863()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest864()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest865()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest866()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest867()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest868()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest869()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest870()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest871()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest872()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest873()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest874()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest875()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest876()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest877()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest878()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest879()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest880()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest881()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest882()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest883()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest884()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest885()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest886()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest887()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest888()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest889()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest890()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest891()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest892()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest893()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest894()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest895()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest896()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest897()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest898()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest899()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest900()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest901()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest902()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest903()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest904()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest905()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest906()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest907()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest908()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest909()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest910()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest911()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest912()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest913()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest914()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest915()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest916()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest917()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest918()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest919()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest920()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest921()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest922()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest923()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest924()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest925()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest926()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest927()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest928()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest929()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest930()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest931()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest932()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest933()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest934()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest935()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest936()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest937()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest938()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest939()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest940()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest941()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest942()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest943()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest944()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest945()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest946()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest947()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest948()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest949()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest950()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest951()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest952()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest953()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest954()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest955()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest956()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest957()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest958()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest959()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest960()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest961()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest962()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest963()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest964()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest965()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest966()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest967()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest968()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest969()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest970()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest971()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest972()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest973()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest974()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest975()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest976()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest977()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest978()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest979()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest980()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest981()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest982()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest983()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest984()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest985()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest986()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest987()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest988()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest989()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest990()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest991()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest992()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest993()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest994()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest995()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest996()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest997()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest998()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest999()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1000()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1001()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1002()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1003()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1004()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1005()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1006()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1007()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1008()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1009()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1010()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1011()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1012()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1013()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1014()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1015()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1016()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1017()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1018()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1019()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1020()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1021()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1022()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1023()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1024()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1025()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1026()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1027()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1028()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1029()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1030()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1031()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1032()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1033()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1034()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1035()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1036()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1037()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1038()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1039()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1040()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1041()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1042()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1043()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1044()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1045()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1046()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1047()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1048()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1049()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1050()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1051()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1052()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1053()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1054()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1055()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1056()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1057()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1058()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1059()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1060()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1061()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1062()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1063()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1064()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1065()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1066()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1067()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1068()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1069()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1070()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1071()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1072()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1073()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1074()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1075()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1076()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1077()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1078()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1079()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1080()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1081()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1082()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1083()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1084()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1085()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1086()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1087()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1088()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1089()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1090()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1091()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1092()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1093()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1094()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1095()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1096()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1097()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1098()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1099()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1100()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1101()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1102()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1103()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1104()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1105()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1106()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1107()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1108()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1109()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1110()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1111()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1112()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1113()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1114()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1115()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1116()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1117()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1118()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1119()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1120()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1121()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1122()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1123()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1124()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1125()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1126()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1127()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == false (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1128()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1129()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1130()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1131()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1132()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1133()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1134()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1135()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1136()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1137()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1138()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1139()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1140()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1141()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1142()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1143()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1144()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1145()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1146()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1147()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1148()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1149()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1150()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1151()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1152()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1153()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1154()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1155()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1156()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1157()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1158()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1159()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1160()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1161()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1162()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1163()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1164()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1165()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1166()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1167()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1168()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1169()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1170()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1171()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1172()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1173()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1174()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1175()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1176()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1177()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1178()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1179()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1180()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1181()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1182()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1183()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1184()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1185()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1186()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1187()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1188()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1189()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1190()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1191()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1192()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1193()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1194()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1195()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1196()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1197()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1198()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1199()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1200()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1201()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1202()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1203()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1204()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1205()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1206()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1207()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1208()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1209()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1210()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1211()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1212()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1213()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1214()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1215()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1216()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1217()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1218()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1219()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1220()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1221()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1222()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1223()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1224()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1225()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1226()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1227()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1228()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1229()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1230()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1231()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1232()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1233()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1234()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1235()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1236()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1237()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1238()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1239()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1240()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1241()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1242()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1243()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1244()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1245()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1246()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1247()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1248()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1249()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1250()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1251()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1252()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1253()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1254()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1255()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1256()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1257()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1258()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1259()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1260()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1261()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1262()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1263()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1264()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1265()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1266()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1267()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1268()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1269()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1270()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1271()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1272()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1273()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1274()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1275()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1276()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1277()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1278()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1279()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1280()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1281()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1282()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1283()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1284()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1285()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1286()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1287()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1288()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1289()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1290()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1291()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1292()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1293()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1294()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1295()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1296()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1297()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1298()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1299()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1300()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1301()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1302()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1303()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1304()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1305()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1306()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1307()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1308()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1309()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1310()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1311()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1312()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1313()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1314()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1315()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == false (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1316()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1317()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1318()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1319()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1320()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1321()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1322()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1323()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1324()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1325()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1326()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1327()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1328()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1329()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1330()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1331()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1332()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1333()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1334()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1335()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1336()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1337()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1338()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1339()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1340()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1341()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1342()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1343()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1344()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1345()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1346()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1347()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1348()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1349()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1350()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1351()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1352()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1353()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1354()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1355()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1356()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1357()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1358()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1359()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1360()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1361()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1362()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == false (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1363()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1364()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1365()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1366()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1367()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1368()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1369()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1370()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1371()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1372()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1373()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1374()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1375()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1376()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1377()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1378()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1379()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1380()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1381()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1382()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1383()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1384()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1385()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1386()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1387()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1388()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1389()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1390()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1391()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1392()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1393()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1394()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1395()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1396()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1397()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1398()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1399()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1400()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1401()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1402()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1403()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1404()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1405()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1406()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1407()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1408()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1409()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1410()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1411()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1412()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1413()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1414()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1415()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1416()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1417()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1418()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1419()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1420()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1421()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1422()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1423()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1424()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1425()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1426()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1427()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1428()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1429()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1430()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1431()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1432()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1433()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1434()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1435()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1436()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1437()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1438()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1439()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1440()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1441()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1442()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1443()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1444()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1445()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1446()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1447()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1448()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1449()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1450()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1451()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1452()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1453()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1454()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1455()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1456()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == false (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1457()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1458()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1459()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1460()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1461()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == false (line 276)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1462()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1463()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1464()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1465()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1466()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1467()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1468()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1469()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1470()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1471()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1472()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1473()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1474()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1475()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1476()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1477()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1478()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1479()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1480()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1481()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1482()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == false (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1483()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1484()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1485()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1486()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1487()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == false (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testEndTest1488()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1489()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1490()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1491()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1492()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1493()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1494()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1495()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1496()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1497()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1498()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1499()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == false (line 297)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1500()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1501()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == false (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1502()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == false (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testEndTest1503()
{
    $test = m::mock('UntypedParameter_test_');
    $time = m::mock('UntypedParameter_time_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (class_exists('PHPUnit_Util_Blacklist', false)) == true (line 238)
    // if (null !== $this->reportUselessTests) == true (line 251)
    // if ($errored = null !== $this->error) == true (line 256)
    // if ($this->runsInSeparateProcess) == true (line 261)
    // if ($deprecation[0]) == true (line 267)
    // if ($this->expectedDeprecations) == true (line 276)
    // if (!in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE), true)) == true (line 277)
    // if (!$errored && !in_array($test->getStatus(), array($BaseTestRunner::STATUS_SKIPPED, $BaseTestRunner::STATUS_INCOMPLETE, $BaseTestRunner::STATUS_FAILURE, $BaseTestRunner::STATUS_ERROR), true)) == true (line 283)
    // if (!$this->runsInSeparateProcess && -2 < $this->state && ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof \PHPUnit\Framework\TestCase)) == true (line 297)
    // if (in_array('time-sensitive', $groups, true)) == true (line 298)
    // if (in_array('dns-sensitive', $groups, true)) == true (line 301)

    $actual = $this->symfonyTestsListenerTrait->endTest($test, $time);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHandleError0()
{
    $type = m::mock('UntypedParameter_type_');
    $msg = m::mock('UntypedParameter_msg_');
    $file = m::mock('UntypedParameter_file_');
    $line = m::mock('UntypedParameter_line_');
    $context = m::mock('UntypedParameter_context_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (E_USER_DEPRECATED !== $type && E_DEPRECATED !== $type) == false (line 309)
    // if (is_array($parsedMsg)) == false (line 317)
    // if (error_reporting()) == false (line 320)

    $actual = $this->symfonyTestsListenerTrait->handleError($type, $msg, $file, $line, $context);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHandleError1()
{
    $type = m::mock('UntypedParameter_type_');
    $msg = m::mock('UntypedParameter_msg_');
    $file = m::mock('UntypedParameter_file_');
    $line = m::mock('UntypedParameter_line_');
    $context = m::mock('UntypedParameter_context_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (E_USER_DEPRECATED !== $type && E_DEPRECATED !== $type) == false (line 309)
    // if (is_array($parsedMsg)) == false (line 317)
    // if (error_reporting()) == true (line 320)

    $actual = $this->symfonyTestsListenerTrait->handleError($type, $msg, $file, $line, $context);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHandleError2()
{
    $type = m::mock('UntypedParameter_type_');
    $msg = m::mock('UntypedParameter_msg_');
    $file = m::mock('UntypedParameter_file_');
    $line = m::mock('UntypedParameter_line_');
    $context = m::mock('UntypedParameter_context_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (E_USER_DEPRECATED !== $type && E_DEPRECATED !== $type) == false (line 309)
    // if (is_array($parsedMsg)) == true (line 317)
    // if (error_reporting()) == false (line 320)

    $actual = $this->symfonyTestsListenerTrait->handleError($type, $msg, $file, $line, $context);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHandleError3()
{
    $type = m::mock('UntypedParameter_type_');
    $msg = m::mock('UntypedParameter_msg_');
    $file = m::mock('UntypedParameter_file_');
    $line = m::mock('UntypedParameter_line_');
    $context = m::mock('UntypedParameter_context_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (E_USER_DEPRECATED !== $type && E_DEPRECATED !== $type) == false (line 309)
    // if (is_array($parsedMsg)) == true (line 317)
    // if (error_reporting()) == true (line 320)

    $actual = $this->symfonyTestsListenerTrait->handleError($type, $msg, $file, $line, $context);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testHandleError4()
{
    $type = m::mock('UntypedParameter_type_');
    $msg = m::mock('UntypedParameter_msg_');
    $file = m::mock('UntypedParameter_file_');
    $line = m::mock('UntypedParameter_line_');
    $context = m::mock('UntypedParameter_context_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (E_USER_DEPRECATED !== $type && E_DEPRECATED !== $type) == true (line 309)

    $actual = $this->symfonyTestsListenerTrait->handleError($type, $msg, $file, $line, $context);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
