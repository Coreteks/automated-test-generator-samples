<?php

namespace tests\Symfony\Bundle\SecurityBundle\DataCollector;

use Mockery as m;
use Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector;
use Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface;
use Symfony\Component\Security\Core\Role\RoleHierarchyInterface;
use Symfony\Component\Security\Http\FirewallMapInterface;
use Symfony\Component\Security\Http\Logout\LogoutUrlGenerator;

class SecurityDataCollectorTest extends \PHPUnit_Framework_TestCase
{
/**
* @var \Mockery\MockInterface
*/
protected $_tokenStorage;
/**
* @var \Mockery\MockInterface
*/
protected $_roleHierarchy;
/**
* @var \Mockery\MockInterface
*/
protected $_logoutUrlGenerator;
/**
* @var \Mockery\MockInterface
*/
protected $_accessDecisionManager;
/**
* @var \Mockery\MockInterface
*/
protected $_firewallMap;
/**
* @var \Mockery\MockInterface
*/
protected $_firewall;
/**
* @var \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector
*/
protected $securityDataCollector;

public function setUp()
{
    parent::setUp();

    $this->_tokenStorage = m::mock(\Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface::class);
    $this->_roleHierarchy = m::mock(\Symfony\Component\Security\Core\Role\RoleHierarchyInterface::class);
    $this->_logoutUrlGenerator = m::mock(\Symfony\Component\Security\Http\Logout\LogoutUrlGenerator::class);
    $this->_accessDecisionManager = m::mock(\Symfony\Component\Security\Core\Authorization\AccessDecisionManagerInterface::class);
    $this->_firewallMap = m::mock(\Symfony\Component\Security\Http\FirewallMapInterface::class);
    $this->_firewall = m::mock(\Symfony\Bundle\SecurityBundle\Debug\TraceableFirewallListener::class);
    $this->securityDataCollector = new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector($this->_tokenStorage, $this->_roleHierarchy, $this->_logoutUrlGenerator, $this->_accessDecisionManager, $this->_firewallMap, $this->_firewall);
}

public function testCollect0()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect1()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect2()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect3()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect4()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect5()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect6()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect7()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect8()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect9()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect10()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect11()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect12()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect13()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect14()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect15()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect16()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect17()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect18()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect19()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect20()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect21()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect22()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect23()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect24()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect25()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect26()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect27()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect28()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect29()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect30()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect31()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect32()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect33()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect34()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect35()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect36()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect37()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect38()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect39()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect40()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect41()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect42()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect43()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect44()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect45()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect46()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect47()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect48()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect49()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect50()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect51()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect52()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect53()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect54()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect55()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect56()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect57()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect58()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect59()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect60()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect61()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect62()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect63()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect64()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect65()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect66()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect67()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect68()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect69()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect70()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect71()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect72()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect73()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect74()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect75()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect76()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect77()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect78()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect79()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect80()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect81()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect82()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect83()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect84()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect85()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect86()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect87()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect88()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect89()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect90()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect91()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect92()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect93()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect94()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect95()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect96()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect97()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect98()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect99()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect100()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect101()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect102()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect103()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect104()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect105()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect106()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect107()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect108()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect109()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect110()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect111()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect112()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect113()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect114()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect115()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect116()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect117()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect118()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect119()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect120()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect121()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect122()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect123()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect124()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect125()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect126()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect127()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect128()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect129()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect130()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect131()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect132()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect133()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect134()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect135()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect136()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect137()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect138()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect139()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect140()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect141()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect142()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect143()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect144()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect145()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect146()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect147()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect148()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect149()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect150()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect151()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect152()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect153()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect154()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect155()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect156()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect157()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect158()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect159()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect160()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect161()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect162()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect163()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect164()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect165()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect166()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect167()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect168()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect169()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect170()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect171()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect172()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect173()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect174()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect175()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect176()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect177()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect178()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect179()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect180()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect181()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect182()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect183()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect184()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect185()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect186()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect187()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect188()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect189()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect190()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect191()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect192()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect193()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect194()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect195()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect196()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect197()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect198()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect199()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect200()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect201()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect202()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect203()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect204()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect205()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect206()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect207()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect208()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect209()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect210()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect211()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect212()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect213()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect214()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect215()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect216()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect217()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect218()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect219()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect220()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect221()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect222()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect223()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect224()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect225()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect226()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect227()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect228()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect229()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect230()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect231()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect232()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect233()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect234()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect235()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect236()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect237()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect238()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect239()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect240()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect241()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect242()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect243()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect244()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect245()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect246()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect247()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect248()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect249()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect250()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect251()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect252()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect253()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect254()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect255()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect256()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect257()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect258()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect259()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect260()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect261()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect262()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect263()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect264()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect265()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect266()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect267()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect268()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect269()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect270()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect271()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect272()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect273()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect274()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect275()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect276()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect277()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect278()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect279()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect280()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect281()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect282()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect283()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect284()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect285()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect286()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect287()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect288()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect289()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect290()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect291()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect292()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect293()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect294()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect295()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect296()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect297()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect298()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect299()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect300()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect301()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect302()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect303()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect304()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect305()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect306()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect307()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect308()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect309()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect310()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect311()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect312()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect313()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect314()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect315()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect316()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect317()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect318()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect319()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect320()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect321()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect322()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect323()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect324()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect325()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect326()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect327()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect328()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect329()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect330()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect331()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect332()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect333()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect334()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect335()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect336()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect337()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect338()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect339()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect340()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect341()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect342()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect343()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect344()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect345()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect346()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect347()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect348()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect349()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect350()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect351()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect352()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect353()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect354()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect355()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect356()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect357()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect358()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect359()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect360()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect361()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect362()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect363()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect364()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect365()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect366()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect367()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect368()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect369()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect370()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect371()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect372()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect373()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect374()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect375()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect376()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect377()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect378()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect379()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect380()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect381()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect382()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect383()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect384()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect385()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect386()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect387()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect388()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect389()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect390()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect391()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect392()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect393()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect394()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect395()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect396()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect397()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect398()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect399()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect400()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect401()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect402()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect403()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect404()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect405()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect406()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect407()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect408()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect409()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect410()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect411()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect412()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect413()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect414()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect415()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect416()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect417()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect418()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect419()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect420()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect421()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect422()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect423()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect424()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect425()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect426()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect427()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect428()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect429()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect430()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect431()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect432()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect433()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect434()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect435()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect436()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect437()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect438()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect439()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect440()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect441()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect442()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect443()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect444()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect445()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect446()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect447()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect448()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect449()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect450()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect451()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect452()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect453()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect454()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect455()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect456()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect457()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect458()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect459()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect460()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect461()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect462()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect463()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect464()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect465()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect466()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect467()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect468()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect469()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect470()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect471()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect472()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect473()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect474()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect475()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect476()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect477()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect478()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect479()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect480()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect481()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect482()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect483()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect484()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect485()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect486()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect487()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect488()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect489()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect490()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect491()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect492()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect493()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect494()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect495()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect496()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect497()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect498()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect499()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect500()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect501()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect502()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect503()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect504()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect505()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect506()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect507()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect508()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect509()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect510()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect511()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect512()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect513()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect514()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect515()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect516()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect517()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect518()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect519()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect520()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect521()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect522()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect523()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect524()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect525()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect526()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect527()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect528()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect529()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect530()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect531()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect532()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect533()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect534()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect535()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect536()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect537()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect538()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect539()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect540()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect541()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect542()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect543()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect544()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect545()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect546()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect547()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect548()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect549()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect550()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect551()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect552()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect553()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect554()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect555()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect556()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect557()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect558()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect559()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect560()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect561()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect562()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect563()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect564()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect565()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect566()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect567()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect568()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect569()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect570()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect571()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect572()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect573()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect574()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect575()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect576()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect577()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect578()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect579()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect580()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect581()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect582()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect583()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == false (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect584()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect585()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect586()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect587()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect588()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect589()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect590()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect591()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect592()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect593()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect594()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect595()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect596()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect597()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect598()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect599()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect600()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect601()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect602()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect603()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect604()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect605()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect606()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect607()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect608()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect609()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect610()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect611()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect612()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect613()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect614()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect615()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect616()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect617()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect618()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect619()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect620()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect621()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect622()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect623()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect624()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect625()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect626()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect627()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect628()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect629()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect630()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect631()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect632()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect633()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect634()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect635()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect636()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect637()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect638()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect639()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect640()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect641()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect642()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect643()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect644()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect645()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect646()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect647()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect648()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect649()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect650()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect651()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect652()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect653()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect654()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect655()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect656()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == false (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect657()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect658()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect659()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect660()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect661()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect662()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect663()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect664()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect665()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect666()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect667()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect668()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect669()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect670()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect671()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect672()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect673()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect674()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect675()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect676()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect677()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect678()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect679()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect680()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect681()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect682()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect683()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect684()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect685()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect686()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect687()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect688()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect689()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect690()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect691()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect692()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect693()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect694()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect695()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect696()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect697()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect698()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect699()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect700()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect701()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect702()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect703()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect704()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect705()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect706()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect707()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect708()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect709()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect710()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect711()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect712()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect713()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect714()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect715()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect716()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect717()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect718()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect719()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect720()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect721()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect722()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect723()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect724()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect725()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect726()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect727()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect728()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect729()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect730()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect731()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect732()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect733()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect734()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect735()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect736()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect737()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect738()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect739()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect740()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect741()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect742()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect743()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect744()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect745()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect746()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect747()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect748()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect749()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect750()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect751()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect752()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect753()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect754()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect755()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect756()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect757()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect758()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect759()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect760()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect761()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect762()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect763()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect764()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect765()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect766()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect767()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect768()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect769()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect770()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect771()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect772()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect773()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect774()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect775()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect776()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect777()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect778()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect779()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect780()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect781()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect782()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect783()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect784()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect785()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect786()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect787()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect788()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect789()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect790()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect791()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect792()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect793()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect794()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect795()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect796()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect797()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect798()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect799()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect800()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect801()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect802()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == false (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect803()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect804()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect805()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect806()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect807()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect808()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect809()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect810()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect811()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect812()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect813()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect814()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect815()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect816()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect817()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect818()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect819()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect820()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect821()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect822()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect823()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect824()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect825()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect826()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == false (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

/**
 * @expectedException \Exception
 */
public function testCollect827()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect828()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect829()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect830()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect831()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect832()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect833()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect834()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect835()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect836()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect837()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect838()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect839()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect840()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect841()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect842()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect843()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect844()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect845()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect846()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect847()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect848()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect849()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect850()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect851()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect852()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect853()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect854()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect855()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect856()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect857()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect858()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect859()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect860()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect861()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect862()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect863()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect864()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect865()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect866()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect867()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect868()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect869()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect870()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect871()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect872()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect873()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect874()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect875()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == false (line 76)
    // if ($role instanceof \Symfony\Component\Security\Core\Role\SwitchUserRole) == true (line 97)
    // if (null !== $this->roleHierarchy) == true (line 103)
    // if (!in_array($role, $assignedRoles, true)) == true (line 106)
    // if (null !== $this->logoutUrlGenerator) == true (line 114)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect876()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect877()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect878()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect879()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect880()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect881()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect882()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect883()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect884()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect885()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect886()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect887()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect888()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect889()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect890()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect891()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect892()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect893()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect894()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect895()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect896()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect897()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect898()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect899()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == false (line 61)
    // if (null === ($token = $this->tokenStorage->getToken())) == true (line 76)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect900()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect901()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect902()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect903()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect904()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect905()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect906()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect907()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == false (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect908()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect909()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect910()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect911()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect912()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect913()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect914()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect915()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect916()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect917()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == false (line 153)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect918()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect919()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == false (line 155)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect920()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect921()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == false (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect922()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == false (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCollect923()
{
    $request = m::mock(\Symfony\Component\HttpFoundation\Request::class);
    $response = m::mock(\Symfony\Component\HttpFoundation\Response::class);
    $exception = m::mock(\Exception::class);

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (null === $this->tokenStorage) == true (line 61)
    // if ($this->accessDecisionManager instanceof \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager) == true (line 138)
    // if ($this->firewallMap instanceof \Symfony\Bundle\SecurityBundle\Security\FirewallMap) == true (line 153)
    // if (null !== $firewallConfig) == true (line 155)
    // if ($this->data['impersonated'] && null !== ($switchUserConfig = $firewallConfig->getSwitchUser())) == true (line 172)
    // if ($this->firewall) == true (line 184)

    $actual = $this->securityDataCollector->collect($request, $response, $exception);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testReset0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->reset();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testLateCollect0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->lateCollect();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testIsEnabled0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->isEnabled();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetUser0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getUser();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetRoles0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getRoles();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetInheritedRoles0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getInheritedRoles();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSupportsRoleHierarchy0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->supportsRoleHierarchy();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testIsAuthenticated0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->isAuthenticated();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testIsImpersonated0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->isImpersonated();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetImpersonatorUser0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getImpersonatorUser();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetImpersonationExitPath0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getImpersonationExitPath();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetTokenClass0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getTokenClass();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetToken0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getToken();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetLogoutUrl0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getLogoutUrl();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetVoters0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getVoters();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetVoterStrategy0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getVoterStrategy();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetAccessDecisionLog0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getAccessDecisionLog();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetFirewall0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getFirewall();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetListeners0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getListeners();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGetName0()
{
    // TODO: Your mock expectations here

    $actual = $this->securityDataCollector->getName();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
