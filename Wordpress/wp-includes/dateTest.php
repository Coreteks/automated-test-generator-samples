<?php

namespace tests;

use Mockery as m;
use WP_Date_Query;

class WP_Date_QueryTest extends \PHPUnit_Framework_TestCase
{
/**
* @var mixed
*/
protected $_date_query = null;
/**
* @var mixed
*/
protected $_default_column = null;
/**
* @var \WP_Date_Query
*/
protected $wP_Date_Query;

public function setUp()
{
    parent::setUp();

    $this->_date_query = null;
    $this->_default_column = null;
    $this->wP_Date_Query = new \WP_Date_Query($this->_date_query, $this->_default_column);
}

public function testSanitize_query0()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query1()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query2()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query3()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query4()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query5()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query6()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query7()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query8()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query9()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query10()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query11()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query12()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query13()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query14()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query15()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query16()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query17()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query18()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query19()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query20()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query21()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query22()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query23()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query24()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query25()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query26()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query27()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query28()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query29()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query30()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query31()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query32()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query33()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query34()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query35()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query36()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query37()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query38()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query39()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query40()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query41()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query42()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query43()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query44()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query45()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query46()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query47()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == false (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query48()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query49()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query50()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query51()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query52()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query53()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query54()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query55()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query56()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query57()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query58()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query59()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == false (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query60()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query61()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query62()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query63()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query64()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query65()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == false (line 212)
    // if (isset($parent_query[$dkey])) == true (line 216)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query66()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query67()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query68()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == false (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query69()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query70()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == false (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSanitize_query71()
{
    $queries = m::mock('UntypedParameter_queries_');
    $parent_query = m::mock('UntypedParameter_parent_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\is_numeric($qkey) && !\is_array($qvalue)) == true (line 205)
    // if (isset($queries[$dkey])) == true (line 212)
    // if ($this->is_first_order_clause($queries)) == true (line 224)
    // if (!\is_array($q) || \in_array($key, $this->time_keys, \true)) == true (line 229)

    $actual = $this->wP_Date_Query->sanitize_query($queries, $parent_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_compare0()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($query['compare']) && \in_array($query['compare'], array('=', '!=', '>', '>=', '<', '<=', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 266)

    $actual = $this->wP_Date_Query->get_compare($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_compare1()
{
    $query = m::mock('UntypedParameter_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!empty($query['compare']) && \in_array($query['compare'], array('=', '!=', '>', '>=', '<', '<=', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 266)

    $actual = $this->wP_Date_Query->get_compare($query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values0()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values2()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values3()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values4()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values5()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values6()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values7()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values8()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values9()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values10()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values11()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values12()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values13()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values14()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values15()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values16()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values17()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values18()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values19()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values20()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values21()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values22()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values23()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values24()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values25()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values26()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values27()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values28()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values29()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values30()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values31()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values32()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values33()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values34()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values35()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values36()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values37()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values38()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values39()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values40()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values41()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values42()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values43()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values44()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values45()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values46()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values47()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values48()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values49()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values50()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values51()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values52()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values53()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values54()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values55()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values56()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values57()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values58()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values59()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values60()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values61()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values62()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values63()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values64()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values65()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values66()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values67()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values68()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values69()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values70()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values71()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values72()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values73()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values74()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values75()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values76()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values77()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values78()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values79()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values80()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values81()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values82()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values83()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values84()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values85()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values86()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values87()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values88()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values89()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values90()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values91()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values92()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values93()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values94()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values95()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values96()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values97()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values98()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values99()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values100()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values101()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values102()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values103()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values104()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values105()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values106()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values107()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values108()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values109()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values110()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values111()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values112()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values113()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values114()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values115()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values116()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values117()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values118()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values119()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values120()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values121()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values122()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values123()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values124()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values125()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values126()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values127()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values128()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values129()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values130()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values131()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values132()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values133()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values134()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values135()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values136()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values137()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values138()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values139()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values140()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values141()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values142()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values143()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values144()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values145()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values146()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values147()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values148()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values149()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values150()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values151()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values152()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values153()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values154()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values155()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values156()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values157()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values158()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values159()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values160()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values161()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values162()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values163()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values164()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values165()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values166()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values167()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values168()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values169()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values170()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values171()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values172()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values173()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values174()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values175()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values176()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values177()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values178()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values179()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values180()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values181()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values182()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values183()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values184()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values185()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values186()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values187()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values188()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values189()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values190()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values191()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values192()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values193()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values194()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values195()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values196()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values197()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values198()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values199()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values200()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values201()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values202()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values203()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values204()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values205()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values206()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values207()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values208()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values209()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values210()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values211()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values212()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values213()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values214()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values215()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values216()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values217()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values218()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values219()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values220()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values221()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values222()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values223()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values224()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values225()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values226()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values227()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values228()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values229()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values230()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values231()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values232()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values233()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values234()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values235()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values236()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values237()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values238()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values239()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values240()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values241()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values242()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values243()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values244()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values245()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values246()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values247()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values248()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values249()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values250()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values251()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values252()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values253()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values254()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values255()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values256()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values257()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values258()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values259()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values260()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values261()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values262()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values263()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values264()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values265()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values266()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values267()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values268()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values269()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values270()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values271()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values272()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values273()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values274()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values275()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values276()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values277()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values278()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values279()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values280()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values281()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values282()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values283()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values284()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values285()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values286()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values287()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values288()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values289()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values290()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values291()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values292()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values293()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values294()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values295()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values296()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values297()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values298()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values299()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values300()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values301()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values302()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values303()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values304()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values305()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values306()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values307()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values308()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values309()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values310()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values311()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values312()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values313()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values314()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values315()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values316()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values317()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values318()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values319()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values320()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values321()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values322()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values323()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values324()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values325()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values326()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values327()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values328()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values329()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values330()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values331()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values332()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values333()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values334()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values335()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values336()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values337()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values338()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values339()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values340()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values341()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values342()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values343()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values344()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values345()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values346()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values347()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values348()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values349()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values350()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values351()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values352()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values353()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values354()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values355()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values356()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values357()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values358()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values359()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values360()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values361()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values362()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values363()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values364()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values365()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values366()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values367()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values368()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values369()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values370()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values371()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values372()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values373()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values374()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values375()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values376()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values377()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values378()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values379()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values380()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values381()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values382()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values383()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values384()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values385()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values386()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values387()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values388()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values389()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values390()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values391()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values392()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values393()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values394()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values395()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values396()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values397()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values398()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values399()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values400()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values401()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values402()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values403()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values404()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values405()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values406()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values407()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values408()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values409()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values410()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values411()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values412()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values413()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values414()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values415()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values416()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values417()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values418()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values419()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values420()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values421()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values422()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values423()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values424()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values425()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values426()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values427()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values428()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values429()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values430()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values431()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values432()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values433()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values434()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values435()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values436()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values437()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values438()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values439()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values440()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values441()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values442()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values443()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values444()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values445()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values446()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values447()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values448()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values449()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values450()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values451()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values452()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values453()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values454()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values455()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values456()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values457()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values458()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values459()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values460()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values461()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values462()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values463()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values464()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values465()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values466()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values467()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values468()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values469()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values470()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values471()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values472()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values473()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values474()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values475()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values476()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values477()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values478()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values479()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values480()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values481()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values482()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values483()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values484()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values485()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values486()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values487()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values488()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values489()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values490()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values491()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values492()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values493()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values494()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values495()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values496()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values497()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values498()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values499()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values500()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values501()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values502()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values503()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values504()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values505()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values506()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values507()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values508()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values509()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values510()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values511()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values512()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values513()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values514()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values515()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values516()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values517()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values518()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values519()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values520()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values521()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values522()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values523()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values524()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values525()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values526()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values527()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values528()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values529()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values530()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values531()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values532()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values533()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values534()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values535()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values536()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values537()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values538()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values539()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values540()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values541()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values542()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values543()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values544()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values545()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values546()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values547()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values548()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values549()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values550()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values551()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values552()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values553()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values554()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values555()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values556()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values557()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values558()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values559()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values560()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values561()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values562()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values563()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values564()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values565()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values566()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values567()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values568()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values569()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values570()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values571()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values572()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values573()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values574()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values575()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values576()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values577()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values578()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values579()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values580()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values581()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values582()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values583()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values584()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values585()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values586()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values587()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values588()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values589()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values590()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values591()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values592()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values593()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values594()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values595()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values596()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values597()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values598()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values599()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values600()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values601()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values602()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values603()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values604()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values605()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values606()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values607()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values608()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values609()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values610()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values611()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values612()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values613()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values614()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values615()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values616()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values617()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values618()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values619()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values620()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values621()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values622()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values623()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values624()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values625()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values626()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values627()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values628()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values629()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values630()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values631()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values632()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values633()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values634()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values635()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values636()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values637()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values638()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values639()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values640()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values641()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values642()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values643()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values644()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values645()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values646()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values647()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values648()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values649()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values650()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values651()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values652()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values653()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values654()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values655()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values656()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values657()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values658()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values659()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == false (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values660()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values661()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values662()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values663()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values664()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values665()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values666()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values667()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values668()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values669()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values670()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values671()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values672()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values673()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values674()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values675()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values676()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values677()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values678()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values679()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values680()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values681()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values682()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values683()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values684()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values685()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values686()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values687()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values688()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values689()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values690()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values691()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values692()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values693()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values694()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values695()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values696()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values697()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values698()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values699()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values700()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values701()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values702()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values703()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values704()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values705()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values706()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values707()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values708()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values709()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values710()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values711()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values712()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values713()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values714()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values715()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values716()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values717()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values718()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values719()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values720()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values721()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values722()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values723()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values724()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values725()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values726()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values727()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values728()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values729()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values730()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values731()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values732()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values733()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values734()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values735()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values736()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values737()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values738()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values739()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values740()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values741()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values742()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values743()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values744()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values745()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values746()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values747()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values748()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values749()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values750()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values751()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values752()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values753()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values754()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values755()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values756()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values757()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values758()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values759()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values760()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values761()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values762()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values763()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values764()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values765()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values766()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values767()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values768()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values769()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values770()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values771()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values772()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values773()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values774()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values775()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values776()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values777()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values778()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values779()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values780()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values781()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values782()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values783()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values784()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values785()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values786()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values787()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values788()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values789()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values790()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values791()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values792()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values793()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values794()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values795()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values796()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values797()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values798()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values799()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values800()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values801()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values802()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values803()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values804()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values805()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values806()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values807()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values808()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values809()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values810()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values811()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values812()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values813()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values814()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values815()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values816()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values817()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values818()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values819()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values820()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values821()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values822()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values823()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values824()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values825()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values826()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values827()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values828()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values829()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values830()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values831()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values832()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values833()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values834()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values835()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values836()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values837()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values838()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values839()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values840()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values841()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values842()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values843()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values844()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values845()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values846()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values847()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values848()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values849()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values850()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values851()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values852()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values853()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values854()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values855()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values856()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values857()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values858()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values859()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values860()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values861()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values862()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values863()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values864()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values865()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values866()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values867()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values868()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values869()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values870()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values871()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values872()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values873()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values874()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values875()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values876()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values877()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values878()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values879()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values880()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values881()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values882()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values883()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values884()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values885()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values886()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values887()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values888()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values889()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values890()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values891()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values892()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values893()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values894()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values895()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values896()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values897()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values898()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values899()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values900()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values901()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values902()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values903()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values904()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values905()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values906()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values907()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values908()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values909()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values910()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values911()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values912()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values913()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values914()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values915()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values916()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values917()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values918()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values919()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values920()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values921()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values922()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values923()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values924()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values925()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values926()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values927()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values928()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values929()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values930()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values931()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values932()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values933()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values934()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values935()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values936()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values937()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values938()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values939()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values940()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values941()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values942()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values943()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values944()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values945()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values946()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values947()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values948()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values949()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values950()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values951()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values952()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values953()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values954()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values955()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values956()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values957()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values958()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values959()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values960()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values961()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values962()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values963()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values964()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values965()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values966()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values967()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values968()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values969()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values970()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values971()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values972()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values973()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values974()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values975()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values976()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values977()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values978()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values979()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values980()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values981()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values982()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values983()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values984()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values985()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values986()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values987()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values988()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values989()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == false (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values990()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values991()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values992()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values993()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values994()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values995()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values996()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values997()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values998()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values999()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1000()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1001()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1002()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1003()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1004()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1005()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1006()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1007()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1008()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1009()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1010()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1011()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1012()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1013()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1014()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1015()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1016()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1017()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1018()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1019()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1020()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1021()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1022()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1023()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1024()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1025()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1026()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1027()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1028()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1029()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1030()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1031()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1032()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1033()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1034()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1035()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1036()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1037()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1038()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1039()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1040()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1041()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1042()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1043()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1044()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1045()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1046()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1047()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1048()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1049()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1050()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1051()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1052()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1053()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1054()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1055()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1056()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1057()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1058()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1059()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1060()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1061()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1062()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1063()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1064()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1065()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1066()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1067()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1068()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1069()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1070()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1071()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1072()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1073()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1074()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1075()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1076()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1077()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1078()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1079()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1080()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1081()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1082()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1083()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1084()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1085()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1086()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1087()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1088()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1089()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1090()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1091()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1092()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1093()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1094()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1095()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1096()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1097()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1098()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1099()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == false (line 309)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1100()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1101()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1102()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1103()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1104()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1105()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1106()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1107()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1108()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1109()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1110()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1111()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1112()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1113()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1114()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1115()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1116()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1117()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1118()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1119()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1120()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1121()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1122()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1123()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1124()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1125()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1126()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1127()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1128()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1129()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1130()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1131()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1132()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1133()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1134()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1135()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1136()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1137()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1138()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1139()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1140()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1141()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1142()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1143()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1144()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1145()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1146()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1147()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1148()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1149()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1150()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1151()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1152()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1153()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1154()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1155()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1156()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1157()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1158()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1159()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1160()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1161()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1162()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1163()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1164()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1165()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1166()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1167()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1168()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1169()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1170()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1171()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1172()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1173()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1174()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1175()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1176()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1177()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1178()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1179()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1180()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1181()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1182()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1183()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1184()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1185()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1186()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1187()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1188()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1189()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1190()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1191()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1192()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1193()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1194()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1195()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1196()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1197()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1198()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1199()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1200()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1201()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1202()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1203()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1204()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1205()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1206()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1207()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1208()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1209()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == false (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1210()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1211()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1212()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1213()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1214()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1215()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1216()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1217()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1218()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1219()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1220()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1221()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1222()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1223()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1224()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1225()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1226()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1227()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1228()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1229()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1230()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1231()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1232()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1233()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1234()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1235()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1236()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1237()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1238()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1239()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1240()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1241()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1242()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1243()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1244()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1245()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1246()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1247()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1248()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1249()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1250()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1251()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1252()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1253()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1254()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1255()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1256()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1257()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1258()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1259()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1260()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1261()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1262()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1263()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1264()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == false (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1265()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1266()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1267()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1268()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1269()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1270()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1271()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1272()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1273()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1274()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1275()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1276()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1277()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1278()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1279()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1280()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1281()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1282()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1283()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1284()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1285()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1286()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1287()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1288()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1289()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1290()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1291()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1292()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1293()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1294()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1295()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1296()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1297()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == false (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1298()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1299()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1300()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1301()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1302()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1303()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1304()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1305()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1306()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1307()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1308()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == false (line 393)
    // if (!\is_numeric($_value) || !$is_between) == true (line 401)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1309()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1310()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == false (line 442)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1311()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1312()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == false (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1313()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1314()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == false (line 429)
    // if ($day_exists && $month_exists) == true (line 442)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], 2012, \sprintf('2012-%s-%s', $date_query['month'], $date_query['day']))) == true (line 447)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1315()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1316()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == false (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1317()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == false (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1318()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == false (line 419)
    // if ($day_exists && $month_exists && $year_exists) == true (line 429)
    // if (!\wp_checkdate($date_query['month'], $date_query['day'], $date_query['year'], \sprintf('%s-%s-%s', $date_query['year'], $date_query['month'], $date_query['day']))) == true (line 431)
    // if (!empty($day_month_year_error_msg)) == true (line 459)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1319()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == false (line 286)
    // if (\array_key_exists('before', $date_query) && \is_array($date_query['before'])) == true (line 297)
    // if (\array_key_exists('after', $date_query) && \is_array($date_query['after'])) == true (line 301)
    // if (\array_key_exists('year', $date_query)) == true (line 309)
    // if (\is_array($date_query['year'])) == true (line 314)
    // if (isset($_year)) == true (line 350)
    // if (!\array_key_exists($key, $date_query)) == true (line 393)
    // if (!$valid) == true (line 419)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_date_values1320()
{
    $date_query = m::mock('UntypedParameter_date_query_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (empty($date_query)) == true (line 286)

    $actual = $this->wP_Date_Query->validate_date_values($date_query);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column0()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == false (line 495)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column1()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == true (line 495)
    // if (!\in_array($column, \apply_filters('date_query_valid_columns', $valid_columns))) == false (line 507)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column2()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == true (line 495)
    // if (!\in_array($column, \apply_filters('date_query_valid_columns', $valid_columns))) == false (line 507)
    // if (\in_array($column, $table_columns)) == false (line 533)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column3()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == true (line 495)
    // if (!\in_array($column, \apply_filters('date_query_valid_columns', $valid_columns))) == false (line 507)
    // if (\in_array($column, $table_columns)) == true (line 533)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column4()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == true (line 495)
    // if (!\in_array($column, \apply_filters('date_query_valid_columns', $valid_columns))) == true (line 507)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column5()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == true (line 495)
    // if (!\in_array($column, \apply_filters('date_query_valid_columns', $valid_columns))) == true (line 507)
    // if (\in_array($column, $table_columns)) == false (line 533)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testValidate_column6()
{
    $column = m::mock('UntypedParameter_column_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\false === \strpos($column, '.')) == true (line 495)
    // if (!\in_array($column, \apply_filters('date_query_valid_columns', $valid_columns))) == true (line 507)
    // if (\in_array($column, $table_columns)) == true (line 533)

    $actual = $this->wP_Date_Query->validate_column($column);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_sql0()
{
    // TODO: Your mock expectations here

    $actual = $this->wP_Date_Query->get_sql();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value0()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == false (line 824)
    // Default (line 842)
    // if (!\is_numeric($value)) == false (line 843)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value1()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == false (line 824)
    // Default (line 842)
    // if (!\is_numeric($value)) == true (line 843)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value2()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == true (line 824)
    // if (!\is_array($value) || 2 != \count($value)) == false (line 825)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value3()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == true (line 824)
    // if (!\is_array($value) || 2 != \count($value)) == false (line 825)
    // if (!\is_numeric($v)) == false (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value4()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == true (line 824)
    // if (!\is_array($value) || 2 != \count($value)) == false (line 825)
    // if (!\is_numeric($v)) == true (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value5()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == true (line 824)
    // if (!\is_array($value) || 2 != \count($value)) == true (line 825)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value6()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == true (line 824)
    // if (!\is_array($value) || 2 != \count($value)) == true (line 825)
    // if (!\is_numeric($v)) == false (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value7()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == false (line 823)
    // Case 'NOT BETWEEN' == true (line 824)
    // if (!\is_array($value) || 2 != \count($value)) == true (line 825)
    // if (!\is_numeric($v)) == true (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value8()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == true (line 823)
    // if (!\is_array($value) || 2 != \count($value)) == false (line 825)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value9()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == true (line 823)
    // if (!\is_array($value) || 2 != \count($value)) == false (line 825)
    // if (!\is_numeric($v)) == false (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value10()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == true (line 823)
    // if (!\is_array($value) || 2 != \count($value)) == false (line 825)
    // if (!\is_numeric($v)) == true (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value11()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == true (line 823)
    // if (!\is_array($value) || 2 != \count($value)) == true (line 825)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value12()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == true (line 823)
    // if (!\is_array($value) || 2 != \count($value)) == true (line 825)
    // if (!\is_numeric($v)) == false (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value13()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == false (line 811)
    // Case 'BETWEEN' == true (line 823)
    // if (!\is_array($value) || 2 != \count($value)) == true (line 825)
    // if (!\is_numeric($v)) == true (line 833)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value14()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == true (line 811)
    // if (empty($value)) == false (line 817)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value15()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == false (line 810)
    // Case 'NOT IN' == true (line 811)
    // if (empty($value)) == true (line 817)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value16()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == true (line 810)
    // if (empty($value)) == false (line 817)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value17()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == false (line 805)
    // switch ($compare) (line 809)
    // Case 'IN' == true (line 810)
    // if (empty($value)) == true (line 817)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_value18()
{
    $compare = m::mock('UntypedParameter_compare_');
    $value = m::mock('UntypedParameter_value_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($value)) == true (line 805)

    $actual = $this->wP_Date_Query->build_value($compare, $value);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime0()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime1()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime2()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime3()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime4()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime5()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime6()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime7()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime8()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime9()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime10()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime11()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime12()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime13()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime14()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime15()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime16()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime17()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime18()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime19()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime20()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime21()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime22()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime23()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime24()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime25()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime26()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime27()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime28()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime29()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime30()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime31()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime32()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime33()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime34()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime35()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime36()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime37()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime38()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime39()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime40()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime41()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime42()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime43()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime44()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime45()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime46()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime47()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime48()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime49()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime50()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime51()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime52()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime53()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime54()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime55()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime56()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime57()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime58()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime59()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime60()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime61()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime62()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime63()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == false (line 870)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime64()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime65()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime66()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime67()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime68()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime69()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime70()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime71()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime72()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime73()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime74()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime75()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime76()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime77()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime78()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime79()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime80()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime81()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime82()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime83()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime84()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime85()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime86()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime87()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime88()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime89()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime90()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime91()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime92()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime93()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime94()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime95()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime96()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime97()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime98()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime99()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime100()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime101()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime102()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime103()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime104()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime105()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime106()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime107()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime108()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime109()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime110()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime111()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime112()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime113()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime114()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime115()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime116()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime117()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime118()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime119()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime120()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime121()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime122()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime123()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime124()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime125()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime126()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime127()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime128()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == false (line 897)
    // if (!\is_array($datetime)) == true (line 909)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime129()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime130()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime131()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime132()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime133()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime134()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime135()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime136()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime137()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime138()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime139()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime140()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime141()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime142()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime143()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime144()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime145()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime146()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime147()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime148()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime149()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime150()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime151()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime152()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime153()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime154()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime155()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime156()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime157()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime158()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime159()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime160()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime161()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime162()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime163()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime164()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime165()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime166()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime167()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime168()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime169()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime170()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime171()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime172()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime173()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime174()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime175()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime176()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime177()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime178()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime179()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime180()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime181()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime182()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime183()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime184()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime185()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime186()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime187()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime188()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime189()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime190()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime191()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime192()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime193()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == false (line 889)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2}) (\\d{2}):(\\d{2})$/', $datetime, $matches)) == true (line 897)
    // if (!\is_array($datetime)) == true (line 909)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime194()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime195()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime196()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime197()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime198()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime199()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime200()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime201()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime202()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime203()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime204()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime205()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime206()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime207()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime208()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime209()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime210()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime211()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime212()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime213()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime214()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime215()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime216()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime217()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime218()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime219()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime220()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime221()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime222()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime223()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime224()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime225()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime226()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime227()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime228()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime229()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime230()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime231()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime232()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime233()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime234()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime235()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime236()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime237()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime238()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime239()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime240()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime241()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime242()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime243()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime244()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime245()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime246()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime247()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime248()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime249()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime250()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime251()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime252()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime253()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime254()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime255()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime256()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime257()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime258()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == false (line 882)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})\\-(\\d{2})$/', $datetime, $matches)) == true (line 889)
    // if (!\is_array($datetime)) == true (line 909)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime259()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime260()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime261()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime262()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime263()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime264()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime265()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime266()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime267()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime268()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime269()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime270()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime271()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime272()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime273()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime274()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime275()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime276()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime277()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime278()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime279()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime280()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime281()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime282()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime283()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime284()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime285()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime286()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime287()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime288()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime289()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime290()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime291()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime292()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime293()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime294()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime295()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime296()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime297()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime298()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime299()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime300()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime301()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime302()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime303()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime304()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime305()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime306()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime307()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime308()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime309()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime310()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime311()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime312()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime313()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime314()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime315()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime316()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime317()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime318()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime319()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime320()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime321()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime322()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime323()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == false (line 876)
    // if (\preg_match('/^(\\d{4})\\-(\\d{2})$/', $datetime, $matches)) == true (line 882)
    // if (!\is_array($datetime)) == true (line 909)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime324()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime325()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime326()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime327()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime328()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime329()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime330()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime331()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime332()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime333()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime334()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime335()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime336()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime337()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime338()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime339()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime340()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime341()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime342()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime343()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime344()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime345()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime346()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime347()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime348()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime349()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime350()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime351()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime352()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime353()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime354()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime355()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == false (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime356()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime357()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime358()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime359()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime360()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime361()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime362()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime363()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime364()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime365()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime366()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime367()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime368()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime369()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime370()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime371()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == false (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime372()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime373()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime374()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime375()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime376()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime377()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime378()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime379()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == false (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime380()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime381()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime382()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime383()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == false (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime384()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime385()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == false (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime386()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == false (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime387()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == false (line 909)
    // if (!isset($datetime['year'])) == true (line 917)
    // if (!isset($datetime['month'])) == true (line 921)
    // if (!isset($datetime['day'])) == true (line 925)
    // if (!isset($datetime['hour'])) == true (line 929)
    // if (!isset($datetime['minute'])) == true (line 933)
    // if (!isset($datetime['second'])) == true (line 937)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_mysql_datetime388()
{
    $datetime = m::mock('UntypedParameter_datetime_');
    $default_to_max = m::mock('UntypedParameter_default_to_max_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!\is_array($datetime)) == true (line 870)
    // if (\preg_match('/^(\\d{4})$/', $datetime, $matches)) == true (line 876)
    // if (!\is_array($datetime)) == true (line 909)

    $actual = $this->wP_Date_Query->build_mysql_datetime($datetime, $default_to_max);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query0()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 990)
    // if (!isset($hour) && !isset($minute) && isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 992)
    // if (!isset($minute)) == false (line 997)
    // if (\null !== $hour) == false (line 1004)
    // if (isset($second)) == false (line 1016)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query1()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 990)
    // if (!isset($hour) && !isset($minute) && isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 992)
    // if (!isset($minute)) == false (line 997)
    // if (\null !== $hour) == false (line 1004)
    // if (isset($second)) == true (line 1016)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query2()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 990)
    // if (!isset($hour) && !isset($minute) && isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 992)
    // if (!isset($minute)) == false (line 997)
    // if (\null !== $hour) == true (line 1004)
    // if (isset($second)) == false (line 1016)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query3()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 990)
    // if (!isset($hour) && !isset($minute) && isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 992)
    // if (!isset($minute)) == false (line 997)
    // if (\null !== $hour) == true (line 1004)
    // if (isset($second)) == true (line 1016)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query4()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 990)
    // if (!isset($hour) && !isset($minute) && isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 992)
    // if (!isset($minute)) == true (line 997)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query5()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 990)
    // if (!isset($hour) && !isset($minute) && isset($second) && \false !== ($value = $this->build_value($compare, $second))) == true (line 992)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query6()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 988)
    // if (!isset($hour) && isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $minute))) == true (line 990)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query7()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == false (line 969)
    // if (isset($hour) && !isset($minute) && !isset($second) && \false !== ($value = $this->build_value($compare, $hour))) == true (line 988)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query8()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query9()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == true (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query10()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == true (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query11()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == false (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == true (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == true (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query12()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == true (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query13()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == true (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == false (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == true (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query14()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == true (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == true (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == false (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query15()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == false (line 964)
    // if (\in_array($compare, array('IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'))) == true (line 969)
    // if (isset($hour) && \false !== ($value = $this->build_value($compare, $hour))) == true (line 972)
    // if (isset($minute) && \false !== ($value = $this->build_value($compare, $minute))) == true (line 976)
    // if (isset($second) && \false !== ($value = $this->build_value($compare, $second))) == true (line 980)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testBuild_time_query16()
{
    $column = m::mock('UntypedParameter_column_');
    $compare = m::mock('UntypedParameter_compare_');
    $hour = m::mock('UntypedParameter_hour_');
    $minute = m::mock('UntypedParameter_minute_');
    $second = m::mock('UntypedParameter_second_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($hour) && !isset($minute) && !isset($second)) == true (line 964)

    $actual = $this->wP_Date_Query->build_time_query($column, $compare, $hour, $minute, $second);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
