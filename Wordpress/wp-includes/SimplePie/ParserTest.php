<?php

namespace tests;

use Mockery as m;
use SimplePie_Parser;

class SimplePie_ParserTest extends \PHPUnit_Framework_TestCase
{
/**
* @var \SimplePie_Parser
*/
protected $simplePie_Parser;

public function setUp()
{
    parent::setUp();

    $this->simplePie_Parser = new \SimplePie_Parser();
}

public function testSet_registry0()
{
    $registry = m::mock(\SimplePie_Registry::class);

    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->set_registry($registry);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse0()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse2()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse3()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse4()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse5()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse6()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse7()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse8()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse9()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse10()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse11()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse12()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse13()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse14()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse15()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse16()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse17()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse18()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse19()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse20()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse21()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse22()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse23()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse24()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse25()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse26()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse27()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse28()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse29()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse30()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse31()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse32()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse33()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse34()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse35()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse36()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse37()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse38()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse39()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse40()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse41()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse42()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse43()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse44()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse45()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse46()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse47()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse48()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse49()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse50()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse51()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse52()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse53()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse54()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse55()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse56()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse57()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse58()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse59()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse60()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse61()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse62()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse63()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse64()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse65()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse66()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse67()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse68()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse69()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse70()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse71()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse72()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse73()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse74()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse75()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse76()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse77()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse78()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse79()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse80()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse81()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse82()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse83()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse84()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse85()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse86()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse87()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse88()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse89()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse90()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse91()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse92()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse93()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse94()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse95()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse96()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse97()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse98()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse99()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse100()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse101()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse102()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse103()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse104()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse105()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse106()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse107()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse108()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse109()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse110()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse111()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse112()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse113()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse114()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse115()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse116()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse117()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse118()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse119()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse120()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse121()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse122()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse123()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse124()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse125()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse126()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse127()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse128()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse129()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse130()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse131()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse132()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse133()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse134()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse135()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse136()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse137()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse138()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse139()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse140()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse141()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse142()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse143()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse144()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse145()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse146()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse147()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse148()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse149()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse150()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse151()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse152()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse153()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse154()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse155()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse156()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse157()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse158()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse159()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse160()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse161()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse162()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse163()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse164()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse165()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse166()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse167()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse168()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse169()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse170()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse171()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse172()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse173()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse174()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse175()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse176()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse177()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse178()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse179()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse180()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse181()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse182()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse183()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse184()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse185()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse186()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse187()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse188()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse189()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse190()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse191()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse192()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse193()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse194()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse195()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse196()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse197()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse198()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse199()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse200()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse201()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse202()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse203()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse204()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse205()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse206()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse207()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse208()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse209()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse210()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse211()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse212()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse213()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse214()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse215()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse216()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse217()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse218()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse219()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse220()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse221()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse222()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse223()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse224()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse225()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse226()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse227()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse228()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse229()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse230()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse231()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse232()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse233()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse234()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse235()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse236()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse237()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse238()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse239()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse240()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse241()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse242()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse243()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse244()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse245()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse246()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse247()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse248()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse249()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse250()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse251()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse252()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse253()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse254()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse255()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse256()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse257()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse258()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse259()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse260()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse261()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse262()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse263()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse264()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse265()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse266()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse267()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse268()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse269()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse270()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse271()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse272()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse273()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse274()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse275()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse276()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse277()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse278()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse279()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse280()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse281()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse282()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse283()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse284()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse285()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse286()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse287()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse288()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse289()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse290()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse291()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse292()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse293()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse294()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse295()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse296()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse297()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse298()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse299()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse300()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse301()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse302()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse303()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse304()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse305()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse306()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse307()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse308()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse309()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse310()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse311()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse312()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse313()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse314()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse315()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse316()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse317()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse318()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse319()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse320()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse321()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse322()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse323()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse324()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse325()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse326()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse327()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse328()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse329()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse330()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse331()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse332()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse333()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse334()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse335()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse336()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse337()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse338()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse339()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse340()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse341()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse342()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse343()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse344()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse345()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse346()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse347()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse348()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse349()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse350()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse351()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse352()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse353()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse354()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse355()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse356()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse357()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse358()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse359()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse360()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse361()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse362()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse363()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse364()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse365()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse366()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse367()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse368()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse369()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse370()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse371()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse372()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse373()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse374()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse375()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse376()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse377()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse378()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse379()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse380()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse381()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse382()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse383()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse384()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse385()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse386()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse387()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse388()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse389()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse390()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse391()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse392()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse393()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse394()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse395()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse396()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse397()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse398()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse399()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse400()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse401()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse402()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse403()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse404()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse405()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse406()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse407()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse408()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse409()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse410()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse411()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse412()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse413()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse414()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse415()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse416()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse417()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse418()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse419()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse420()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse421()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse422()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse423()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse424()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse425()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse426()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse427()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse428()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse429()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse430()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse431()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse432()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse433()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse434()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse435()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse436()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse437()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse438()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse439()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse440()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse441()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse442()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse443()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse444()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse445()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse446()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse447()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse448()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse449()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse450()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse451()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse452()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse453()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse454()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse455()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse456()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse457()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse458()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse459()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse460()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse461()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse462()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse463()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse464()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse465()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse466()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse467()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse468()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse469()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse470()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse471()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse472()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse473()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse474()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse475()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse476()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse477()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse478()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse479()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse480()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse481()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse482()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse483()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse484()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse485()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse486()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse487()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse488()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse489()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse490()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse491()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse492()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse493()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse494()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse495()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse496()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse497()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse498()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse499()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse500()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse501()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse502()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse503()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse504()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse505()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse506()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse507()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse508()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse509()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse510()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse511()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse512()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse513()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse514()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse515()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse516()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse517()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse518()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse519()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse520()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse521()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse522()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse523()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse524()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse525()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse526()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse527()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse528()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse529()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse530()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse531()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse532()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse533()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse534()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse535()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse536()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse537()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse538()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse539()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse540()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse541()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse542()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse543()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse544()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse545()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse546()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse547()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse548()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse549()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse550()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse551()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse552()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse553()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse554()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse555()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse556()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse557()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse558()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse559()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse560()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse561()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse562()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse563()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse564()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse565()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse566()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse567()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse568()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse569()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse570()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse571()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse572()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse573()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse574()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse575()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse576()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse577()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse578()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse579()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse580()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse581()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse582()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse583()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse584()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse585()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse586()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse587()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse588()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse589()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse590()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse591()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse592()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse593()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse594()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse595()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse596()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse597()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse598()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse599()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse600()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse601()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse602()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse603()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse604()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse605()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse606()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse607()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse608()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse609()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse610()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse611()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse612()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse613()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse614()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse615()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse616()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse617()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse618()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse619()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse620()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse621()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse622()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse623()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse624()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse625()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse626()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse627()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse628()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse629()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse630()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse631()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse632()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse633()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse634()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse635()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse636()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse637()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse638()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse639()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse640()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse641()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse642()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse643()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse644()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse645()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse646()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse647()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse648()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse649()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse650()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse651()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse652()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse653()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse654()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse655()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse656()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse657()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse658()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse659()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse660()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse661()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse662()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse663()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse664()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse665()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse666()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse667()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse668()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse669()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse670()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse671()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse672()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse673()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse674()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse675()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse676()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse677()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse678()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse679()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse680()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse681()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse682()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse683()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse684()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse685()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse686()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse687()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse688()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse689()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse690()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse691()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse692()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse693()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse694()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse695()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse696()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse697()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse698()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse699()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse700()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse701()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse702()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse703()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse704()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse705()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse706()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse707()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse708()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse709()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse710()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse711()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse712()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse713()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse714()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse715()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse716()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse717()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse718()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse719()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse720()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse721()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse722()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse723()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse724()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse725()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse726()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse727()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse728()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse729()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse730()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse731()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse732()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse733()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse734()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse735()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse736()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse737()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse738()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse739()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse740()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse741()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse742()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse743()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse744()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse745()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse746()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse747()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse748()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse749()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse750()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse751()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse752()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse753()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse754()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse755()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse756()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse757()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse758()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse759()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse760()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse761()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse762()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse763()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse764()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse765()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse766()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse767()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse768()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse769()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse770()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse771()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse772()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse773()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse774()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse775()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse776()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse777()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse778()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse779()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse780()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse781()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse782()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse783()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse784()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse785()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse786()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse787()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse788()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse789()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse790()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse791()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse792()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse793()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse794()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse795()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse796()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse797()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse798()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse799()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse800()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse801()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse802()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse803()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse804()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse805()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse806()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse807()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse808()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse809()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse810()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse811()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse812()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse813()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse814()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse815()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse816()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse817()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse818()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse819()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse820()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse821()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse822()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse823()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse824()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse825()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse826()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse827()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse828()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse829()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse830()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse831()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse832()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse833()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse834()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse835()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse836()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse837()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse838()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse839()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse840()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse841()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse842()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse843()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse844()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse845()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse846()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse847()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse848()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse849()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse850()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse851()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse852()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse853()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse854()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse855()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse856()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse857()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse858()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse859()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse860()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse861()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse862()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse863()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse864()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse865()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse866()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse867()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse868()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse869()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse870()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse871()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse872()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse873()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse874()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse875()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse876()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse877()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse878()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse879()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse880()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse881()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse882()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse883()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse884()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse885()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse886()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse887()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse888()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse889()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse890()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse891()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse892()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse893()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse894()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse895()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse896()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse897()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse898()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse899()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse900()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse901()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse902()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse903()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse904()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse905()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse906()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse907()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse908()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse909()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse910()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse911()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse912()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse913()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse914()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse915()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse916()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse917()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == false (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse918()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse919()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse920()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse921()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse922()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse923()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse924()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse925()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse926()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse927()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse928()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse929()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse930()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse931()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse932()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse933()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse934()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse935()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse936()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse937()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse938()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse939()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse940()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse941()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse942()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse943()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse944()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse945()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse946()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse947()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse948()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse949()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse950()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse951()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse952()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse953()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse954()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse955()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse956()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse957()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse958()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse959()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse960()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse961()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse962()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse963()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse964()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse965()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse966()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse967()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse968()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse969()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse970()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse971()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse972()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse973()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse974()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse975()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse976()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse977()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse978()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse979()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse980()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse981()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse982()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse983()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse984()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse985()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse986()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse987()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse988()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse989()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse990()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse991()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse992()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse993()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse994()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse995()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse996()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse997()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse998()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse999()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1000()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1001()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1002()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1003()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1004()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1005()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1006()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1007()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1008()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1009()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1010()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1011()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1012()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1013()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1014()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1015()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1016()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1017()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1018()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1019()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1020()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1021()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1022()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1023()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1024()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1025()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1026()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1027()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1028()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1029()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1030()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1031()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1032()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1033()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1034()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1035()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1036()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1037()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1038()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1039()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1040()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1041()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1042()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1043()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1044()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1045()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1046()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1047()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1048()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1049()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1050()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1051()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1052()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1053()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1054()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1055()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1056()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1057()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1058()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1059()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1060()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1061()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1062()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1063()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1064()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1065()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1066()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1067()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1068()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1069()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1070()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == false (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1071()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1072()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1073()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1074()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1075()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1076()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1077()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1078()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1079()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1080()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1081()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1082()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1083()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1084()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1085()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1086()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1087()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1088()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1089()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1090()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1091()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1092()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1093()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1094()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1095()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1096()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1097()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1098()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1099()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1100()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1101()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1102()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1103()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1104()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1105()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1106()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1107()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1108()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1109()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1110()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1111()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1112()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1113()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1114()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1115()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1116()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1117()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1118()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1119()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1120()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1121()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1122()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1123()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1124()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1125()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1126()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1127()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1128()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1129()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1130()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1131()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1132()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1133()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1134()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1135()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1136()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1137()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1138()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1139()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1140()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1141()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1142()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1143()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1144()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1145()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1146()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1147()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1148()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1149()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1150()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1151()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1152()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1153()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1154()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1155()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1156()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1157()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1158()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1159()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1160()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1161()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1162()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1163()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1164()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1165()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1166()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1167()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1168()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1169()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1170()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1171()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1172()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1173()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1174()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1175()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1176()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1177()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1178()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1179()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1180()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1181()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1182()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1183()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1184()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1185()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1186()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1187()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1188()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1189()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1190()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1191()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1192()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1193()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1194()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1195()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1196()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1197()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1198()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1199()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1200()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1201()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1202()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1203()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1204()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1205()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1206()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1207()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1208()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1209()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1210()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1211()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1212()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1213()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1214()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1215()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1216()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1217()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1218()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1219()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1220()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1221()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1222()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1223()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == false (line 107)
    // if (\substr($data, 0, 3) === "ï»¿") == true (line 112)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1224()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1225()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1226()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1227()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1228()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1229()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1230()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1231()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1232()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1233()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1234()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1235()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1236()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1237()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1238()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1239()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1240()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1241()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1242()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1243()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1244()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1245()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1246()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1247()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1248()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1249()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1250()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1251()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1252()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1253()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1254()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1255()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1256()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1257()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1258()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1259()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1260()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1261()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1262()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1263()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1264()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1265()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1266()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1267()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1268()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1269()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1270()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1271()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1272()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1273()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1274()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1275()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1276()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1277()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1278()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1279()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1280()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1281()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1282()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1283()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1284()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1285()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1286()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1287()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1288()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1289()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1290()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1291()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1292()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1293()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1294()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1295()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1296()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1297()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1298()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1299()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1300()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1301()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1302()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1303()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1304()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1305()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1306()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1307()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1308()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1309()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1310()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1311()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1312()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1313()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1314()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1315()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1316()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1317()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1318()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1319()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1320()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1321()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1322()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1323()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1324()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1325()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1326()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1327()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1328()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1329()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1330()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1331()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1332()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1333()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1334()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1335()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1336()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1337()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1338()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1339()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1340()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1341()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1342()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1343()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1344()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1345()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1346()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1347()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1348()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1349()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1350()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1351()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1352()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1353()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1354()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1355()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1356()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1357()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1358()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1359()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1360()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1361()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1362()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1363()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1364()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1365()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1366()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1367()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1368()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1369()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1370()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1371()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1372()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1373()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1374()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1375()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1376()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == false (line 102)
    // if (\substr($data, 0, 2) === "ÿþ") == true (line 107)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1377()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1378()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1379()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1380()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1381()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1382()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1383()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1384()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1385()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1386()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1387()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1388()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1389()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1390()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1391()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1392()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1393()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1394()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1395()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1396()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1397()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1398()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1399()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1400()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1401()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1402()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1403()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1404()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1405()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1406()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1407()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1408()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1409()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1410()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1411()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1412()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1413()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1414()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1415()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1416()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1417()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1418()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1419()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1420()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1421()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1422()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1423()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1424()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1425()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1426()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1427()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1428()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1429()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1430()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1431()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1432()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1433()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1434()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1435()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1436()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1437()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1438()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1439()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1440()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1441()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1442()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1443()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1444()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1445()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1446()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1447()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1448()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1449()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1450()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1451()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1452()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1453()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1454()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1455()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1456()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1457()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1458()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1459()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1460()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1461()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1462()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1463()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1464()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1465()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1466()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1467()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1468()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1469()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1470()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1471()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1472()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1473()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1474()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1475()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1476()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1477()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1478()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1479()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1480()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1481()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1482()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1483()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1484()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1485()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1486()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1487()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1488()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1489()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1490()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1491()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1492()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1493()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1494()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1495()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1496()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1497()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1498()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1499()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1500()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1501()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1502()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1503()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1504()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1505()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1506()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1507()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1508()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1509()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1510()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1511()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1512()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1513()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1514()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1515()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1516()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1517()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1518()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1519()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1520()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1521()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1522()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1523()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1524()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1525()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1526()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1527()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1528()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1529()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == false (line 97)
    // if (\substr($data, 0, 2) === "þÿ") == true (line 102)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1530()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1531()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1532()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1533()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1534()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1535()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1536()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1537()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1538()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1539()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1540()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1541()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1542()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1543()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1544()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1545()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1546()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1547()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1548()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1549()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1550()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1551()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1552()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1553()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1554()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1555()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1556()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1557()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1558()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1559()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1560()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1561()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1562()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1563()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1564()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1565()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1566()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1567()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1568()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1569()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1570()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1571()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1572()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1573()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1574()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1575()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1576()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1577()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1578()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1579()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1580()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1581()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1582()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1583()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1584()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1585()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1586()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1587()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1588()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1589()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1590()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1591()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1592()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1593()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1594()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1595()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1596()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1597()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1598()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1599()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1600()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1601()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1602()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1603()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1604()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1605()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1606()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1607()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1608()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1609()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1610()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1611()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1612()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1613()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1614()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1615()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1616()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1617()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1618()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1619()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1620()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1621()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1622()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1623()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1624()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1625()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1626()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1627()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1628()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1629()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1630()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1631()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1632()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1633()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1634()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1635()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1636()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1637()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1638()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1639()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1640()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1641()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1642()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1643()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1644()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1645()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1646()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1647()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1648()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1649()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1650()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1651()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1652()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1653()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1654()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1655()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1656()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1657()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1658()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1659()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1660()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1661()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1662()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1663()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1664()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1665()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1666()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1667()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1668()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1669()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1670()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1671()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1672()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1673()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1674()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1675()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1676()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1677()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1678()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1679()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1680()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1681()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1682()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == false (line 92)
    // if (\substr($data, 0, 4) === "ÿþ\0\0") == true (line 97)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1683()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1684()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1685()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1686()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1687()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1688()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1689()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1690()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1691()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1692()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1693()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1694()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1695()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1696()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1697()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1698()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1699()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1700()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1701()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1702()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1703()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1704()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1705()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1706()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1707()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1708()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1709()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1710()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1711()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1712()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1713()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1714()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1715()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1716()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1717()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1718()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1719()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1720()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1721()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1722()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1723()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1724()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1725()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1726()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1727()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1728()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1729()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1730()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1731()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1732()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1733()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1734()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1735()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1736()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1737()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1738()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1739()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1740()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1741()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1742()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1743()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1744()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1745()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1746()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1747()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1748()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1749()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1750()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1751()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1752()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1753()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1754()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1755()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1756()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1757()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1758()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == false (line 117)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1759()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == false (line 120)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1760()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1761()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1762()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1763()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1764()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1765()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1766()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1767()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1768()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1769()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1770()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1771()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1772()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1773()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1774()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1775()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1776()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1777()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1778()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1779()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1780()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1781()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1782()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1783()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1784()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1785()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1786()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1787()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1788()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1789()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1790()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1791()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1792()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1793()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1794()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1795()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1796()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1797()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == false (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1798()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1799()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1800()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1801()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == false (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1802()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1803()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == false (line 216)
    // Case \constant('XMLReader::CDATA') == true (line 218)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1804()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1805()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == false (line 187)
    // Case \constant('XMLReader::TEXT') == true (line 216)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1806()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1807()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1808()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1809()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1810()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1811()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1812()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1813()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1814()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1815()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1816()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1817()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == false (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1818()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1819()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1820()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1821()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1822()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1823()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1824()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1825()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == false (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1826()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1827()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == false (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1828()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1829()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == false (line 176)
    // Case \constant('XMLReader::ELEMENT') == true (line 187)
    // if ($xml->namespaceURI !== '') == true (line 189)
    // while ($xml->moveToNextAttribute()) == true (line 198)
    // if ($xml->namespaceURI !== '') == true (line 200)
    // while ($xml->moveToNextAttribute()) == false (line 198)
    // if ($empty) == true (line 211)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1830()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1831()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == false (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1832()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == false (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1833()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == false (line 144)
    // while (@$xml->read()) == true (line 171)
    // switch ($xml->nodeType) (line 173)
    // Case \constant('XMLReader::END_ELEMENT') == true (line 176)
    // if ($xml->namespaceURI !== '') == true (line 177)
    // while (@$xml->read()) == false (line 171)
    // if ($error = \libxml_get_last_error()) == true (line 223)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1834()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == false (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testParse1835()
{
    $data = m::mock('UntypedParameter_data_');
    $encoding = m::mock('UntypedParameter_encoding_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (\strtoupper($encoding) === 'US-ASCII') == true (line 81)
    // if (\substr($data, 0, 4) === "\0\0þÿ") == true (line 92)
    // if (\substr($data, 0, 5) === '<?xml' && \strspn(\substr($data, 5, 1), "\t\n\r ") && ($pos = \strpos($data, '?>')) !== \false) == true (line 117)
    // if ($declaration->parse()) == true (line 120)
    // if ($xml_is_sane === \null) == true (line 135)
    // if ($xml_is_sane) == true (line 144)
    // if (!\xml_parse($xml, $data, \true)) == true (line 154)

    $actual = $this->simplePie_Parser->parse($data, $encoding);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_error_code0()
{
    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->get_error_code();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_error_string0()
{
    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->get_error_string();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_current_line0()
{
    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->get_current_line();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_current_column0()
{
    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->get_current_column();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_current_byte0()
{
    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->get_current_byte();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testGet_data0()
{
    // TODO: Your mock expectations here

    $actual = $this->simplePie_Parser->get_data();
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open0()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open1()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open2()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open3()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open4()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open5()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open6()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open7()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open8()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open9()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open10()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open11()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open12()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open13()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open14()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open15()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open16()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open17()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open18()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open19()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open20()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open21()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open22()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open23()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open24()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open25()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open26()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open27()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open28()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open29()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open30()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open31()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open32()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open33()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open34()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open35()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open36()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open37()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open38()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open39()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open40()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open41()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open42()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open43()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open44()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open45()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open46()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open47()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == false (line 279)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open48()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open49()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open50()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open51()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open52()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open53()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open54()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open55()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open56()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open57()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open58()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open59()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == false (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open60()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open61()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open62()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open63()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open64()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open65()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == false (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open66()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == false (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open67()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == false (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_03 && \in_array(\end($this->element), array('title', 'tagline', 'copyright', 'info', 'summary', 'content')) && isset($attribs['']['mode']) && $attribs['']['mode'] === 'xml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_ATOM_10 && \in_array(\end($this->element), array('rights', 'subtitle', 'summary', 'info', 'title', 'content')) && isset($attribs['']['type']) && $attribs['']['type'] === 'xhtml' || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_20 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_090 && \in_array(\end($this->element), array('title')) || \end($this->namespace) === \SIMPLEPIE_NAMESPACE_RSS_10 && \in_array(\end($this->element), array('title'))) == true (line 324)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open68()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == false (line 306)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open69()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == false (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open70()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_open71()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');
    $attributes = m::mock('UntypedParameter_attributes_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['base'])) == true (line 279)
    // if ($base !== \false) == true (line 282)
    // if (isset($attribs[\SIMPLEPIE_NAMESPACE_XML]['lang'])) == true (line 294)
    // if ($this->current_xhtml_construct >= 0) == true (line 303)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML) == true (line 306)
    // if (isset($attribs[''])) == true (line 309)

    $actual = $this->simplePie_Parser->tag_open($parser, $tag, $attributes);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCdata0()
{
    $parser = m::mock('UntypedParameter_parser_');
    $cdata = m::mock('UntypedParameter_cdata_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == false (line 337)

    $actual = $this->simplePie_Parser->cdata($parser, $cdata);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testCdata1()
{
    $parser = m::mock('UntypedParameter_parser_');
    $cdata = m::mock('UntypedParameter_cdata_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == true (line 337)

    $actual = $this->simplePie_Parser->cdata($parser, $cdata);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_close0()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == false (line 349)
    // if ($this->current_xhtml_construct === -1) == false (line 357)

    $actual = $this->simplePie_Parser->tag_close($parser, $tag);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_close1()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == false (line 349)
    // if ($this->current_xhtml_construct === -1) == true (line 357)

    $actual = $this->simplePie_Parser->tag_close($parser, $tag);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_close2()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == true (line 349)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML && !\in_array(\end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'))) == false (line 352)
    // if ($this->current_xhtml_construct === -1) == false (line 357)

    $actual = $this->simplePie_Parser->tag_close($parser, $tag);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_close3()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == true (line 349)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML && !\in_array(\end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'))) == false (line 352)
    // if ($this->current_xhtml_construct === -1) == true (line 357)

    $actual = $this->simplePie_Parser->tag_close($parser, $tag);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_close4()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == true (line 349)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML && !\in_array(\end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'))) == true (line 352)
    // if ($this->current_xhtml_construct === -1) == false (line 357)

    $actual = $this->simplePie_Parser->tag_close($parser, $tag);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testTag_close5()
{
    $parser = m::mock('UntypedParameter_parser_');
    $tag = m::mock('UntypedParameter_tag_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if ($this->current_xhtml_construct >= 0) == true (line 349)
    // if (\end($this->namespace) === \SIMPLEPIE_NAMESPACE_XHTML && !\in_array(\end($this->element), array('area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'))) == true (line 352)
    // if ($this->current_xhtml_construct === -1) == true (line 357)

    $actual = $this->simplePie_Parser->tag_close($parser, $tag);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns0()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == false (line 373)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns1()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == false (line 375)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns2()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == false (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == false (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == false (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns3()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == false (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == false (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == true (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns4()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == false (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == true (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == false (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns5()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == false (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == true (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == true (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns6()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == true (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == false (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == false (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns7()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == true (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == false (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == true (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns8()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == true (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == true (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == false (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}

public function testSplit_ns9()
{
    $string = m::mock('UntypedParameter_string_');

    // TODO: Your mock expectations here

    // Traversed conditions
    // if (!isset($cache[$string])) == true (line 373)
    // if ($pos = \strpos($string, $this->separator)) == true (line 375)
    // if (!$separator_length) == true (line 378)
    // if (\strtolower($namespace) === \SIMPLEPIE_NAMESPACE_ITUNES) == true (line 384)
    // if ($namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG2 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG3 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG4 || $namespace === \SIMPLEPIE_NAMESPACE_MEDIARSS_WRONG5) == true (line 390)

    $actual = $this->simplePie_Parser->split_ns($string);
    $expected = null; // TODO: Expected value here
    $this->assertEquals($expected, $actual);
}
}
